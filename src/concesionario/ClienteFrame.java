/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package concesionario;

import java.awt.event.ActionEvent;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jose-
 */
public class ClienteFrame extends javax.swing.JFrame {
    ObjectInputStream ois;
    ObjectOutputStream oos;
    String dinero;
    String modelo;
    Usuario usuario;
    ArrayList<Coche> coches;
    DefaultTableModel model;
    DefaultTableModel model2;
    boolean aceptar;
    public ClienteFrame() {
        initComponents();
        coches = new ArrayList<Coche>();
        lDinero.setText(dinero);
        model2 = (DefaultTableModel) tCoches2.getModel();
        ListSelectionModel selectionModel = tCoches.getSelectionModel();
        ListSelectionListener listSelectionListener = new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = tCoches.getSelectedRow();
                    if (selectedRow != -1) {
                        modelo = (String) tCoches.getValueAt(selectedRow, 0);
                    }
                }
            }
        };
        selectionModel.addListSelectionListener(listSelectionListener);
        
        ListSelectionModel selectionModel2 = tCoches2.getSelectionModel();
        ListSelectionListener listSelectionListener2 = new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = tCoches2.getSelectedRow();
                    if (selectedRow != -1) {
                        modelo = (String) tCoches2.getValueAt(selectedRow, 0);
                    }
                }
            }
        };
        selectionModel2.addListSelectionListener(listSelectionListener2);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lDinero = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tCoches = new javax.swing.JTable();
        bVender = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lDinero1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tCoches2 = new javax.swing.JTable();
        bComprar = new javax.swing.JButton();
        bActualizar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Mi Dinero:");

        lDinero.setText("jLabel3");

        tCoches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Modelo", "Color", "Precio", "En Venta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tCoches);

        bVender.setText("Poner en Venta");
        bVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVenderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lDinero)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bVender)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lDinero))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(bVender)))
                .addContainerGap())
        );

        jTabbedPane5.addTab("Mis coches", jPanel2);

        jLabel3.setText("Mi Dinero:");

        lDinero1.setText("jLabel3");

        tCoches2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Modelo", "Color", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tCoches2);

        bComprar.setText("Comprar");
        bComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bComprarActionPerformed(evt);
            }
        });

        bActualizar.setText("Actualizar");
        bActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActualizarActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lDinero1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bComprar)
                    .addComponent(bActualizar)
                    .addComponent(jButton1))
                .addGap(0, 23, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lDinero1))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(bActualizar)
                        .addGap(28, 28, 28)
                        .addComponent(bComprar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane5.addTab("Concesionario", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane5)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane5)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVenderActionPerformed
        for(Coche cochecito: usuario.getCoches()){
            if(cochecito.isEnVenta()){
                actualizarTableCoches(usuario);
                actualizarTableCoches2();
            }
        }
    }//GEN-LAST:event_bVenderActionPerformed

    private void bComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bComprarActionPerformed
        try {
            this.aceptar=true;
            EnvioRed er1 = (EnvioRed) ois.readObject();
            this.coches=er1.getCoches();
            actualizarTableCoches2();
            RespuestaRed rr1= new RespuestaRed(this.modelo,this.aceptar);
            oos.writeObject(rr1);
            oos.flush();
        } catch (IOException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bComprarActionPerformed

    private void bActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActualizarActionPerformed
 try {
        if (ois == null) {
            throw new NullPointerException("ObjectInputStream es null");
        }
        System.out.println("Leyendo objeto desde ObjectInputStream...");
        EnvioRed er1 = (EnvioRed) ois.readObject();
        if (er1 == null) {
            throw new NullPointerException("EnvioRed es null");
        }
        System.out.println("Objeto EnvioRed leído correctamente.");
        ArrayList<Coche> cochesNuevos = er1.getCoches();
        if (cochesNuevos == null) {
            throw new NullPointerException("Lista de coches en EnvioRed es null");
        }
        System.out.println("Lista de coches en EnvioRed obtenida correctamente.");
        synchronized (this.coches) {
            this.coches = cochesNuevos;
        }
        actualizarTableCoches2(); // Asegúrate de que este método actualiza la interfaz correctamente

        // Envía una respuesta de confirmación si es necesario
        RespuestaRed rr1 = new RespuestaRed(this.modelo, this.aceptar);
        if (oos == null) {
            throw new NullPointerException("ObjectOutputStream es null");
        }
        oos.writeObject(rr1);
        oos.flush();
    } catch (IOException | ClassNotFoundException ex) {
        Logger.getLogger(ClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
    } catch (NullPointerException ex) {
        System.err.println("Error de puntero nulo: " + ex.getMessage());
        ex.printStackTrace();
    }
    }//GEN-LAST:event_bActualizarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        borrarTabla();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JButton bComprar;
    private javax.swing.JButton bVender;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JLabel lDinero;
    private javax.swing.JLabel lDinero1;
    private javax.swing.JTable tCoches;
    private javax.swing.JTable tCoches2;
    // End of variables declaration//GEN-END:variables

    void actualizar() {
        lDinero.setText(this.dinero);
        lDinero1.setText(this.dinero);
    }
    
    public void actualizarTableCoches(Usuario user){
        usuario = user;
        ArrayList<Coche> coches = user.getCoches();
        model = (DefaultTableModel) tCoches.getModel();
        model.setRowCount(0);
        ArrayList<String>modeloAr=new ArrayList<String>();
        ArrayList<String>color=new ArrayList<String>();
        ArrayList<String>precio=new ArrayList<String>();
        ArrayList<String>enVenta=new ArrayList<String>();
        for(Coche cochecito:coches){
            if(cochecito.isEnVenta()){
                modeloAr.add(cochecito.getModelo());
                color.add(cochecito.getColor());
                precio.add(String.valueOf(cochecito.getPrecio()));
                enVenta.add("Si");
            }else{
                enVenta.add("No");
            }
        }
        Object[]modeloFijo=modeloAr.toArray();
        Object[]colorFijo=color.toArray();
        Object[]precioFijo=precio.toArray();
        Object[]enVentaFijo=enVenta.toArray();
        for (int i = 0;i<modeloFijo.length;i++) {
            model.addRow(new String[]{modeloFijo[i].toString(),colorFijo[i].toString(),precioFijo[i].toString(),enVentaFijo[i].toString()});
        }
        
    }
    
    public void actualizarTableCoches2() {
    model2.setRowCount(0); // Limpia la tabla existente
    for (Coche cochecito : coches) {
        if (cochecito.isEnVenta()) {
            model2.addRow(new Object[]{cochecito.getModelo(), cochecito.getColor(), cochecito.getPrecio()});
        }
    }
    model2.fireTableDataChanged(); // Notifica a la tabla que los datos han cambiado
    System.out.println("Tabla de coches actualizada.");
}
    
    public void borrarTabla(){
        model2.setRowCount(0);
    }
}
